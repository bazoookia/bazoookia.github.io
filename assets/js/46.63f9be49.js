(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{479:function(a,s,n){"use strict";n.r(s);var e=n(2),t=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[a._v("Clangd -- linux下最趁手的C++ LSP")])]),a._v(" "),s("h2",{attrs:{id:"为什么选clangd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么选clangd"}},[a._v("#")]),a._v(" 为什么选Clangd")]),a._v(" "),s("p",[a._v("目前用过的C++的lsp主要有ccls和clangd。力挺clangd的原因，主要是llvm下有\n个clangd-indexer的存在，在大项目中非常有用。")]),a._v(" "),s("h3",{attrs:{id:"clangd-indexer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#clangd-indexer"}},[a._v("#")]),a._v(" clangd-indexer")]),a._v(" "),s("h4",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[a._v("#")]),a._v(" 简介")]),a._v(" "),s("p",[a._v("实际使用lsp类的插件时，总会遇到一个问题：当项目较大时，使用\nfind-refrence功能时总会漏掉一些代码位置（尤其是未打开过的文件）。此时\n就需要clangd-indexer登场。")]),a._v(" "),s("p",[a._v("按照官方说法，clangd-indexer是一个调试工具，用来根据compile db生成全量\n的index索引。这个功能配合clangd的load cache选项，正好决上面的问题。但\n是由于定位是一个调试工具，因此并未在发行的tools-extra中包含，需要源码\n编译。而且之前发现一个比较坑的地方，是clangd的版本需要和clangd-indexer\n的版本对应。")]),a._v(" "),s("h4",{attrs:{id:"使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[a._v("#")]),a._v(" 使用")]),a._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 生成cache")]),a._v("\nclangd-indexer "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--executor")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("all-TUs --execute-concurrency"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("256")]),a._v("\ncompile_commands.json "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" ./clangd.dex\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 加载cache")]),a._v("\nclangd --index-file"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("./clangd.dex\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("h3",{attrs:{id:"配置clangd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置clangd"}},[a._v("#")]),a._v(" 配置clangd")]),a._v(" "),s("p",[a._v('clangd支持单独配置编译选项等，可以方便的解决诸如"too many errors\nemitted, stopping now"后停止解析的问题。')]),a._v(" "),s("p",[a._v("可以全局配置（$XDG_CONFIG_HOME/clangd/config.yaml），也可以分项目配置\n（${PROJECT_ROOT}/.clangd）。")]),a._v(" "),s("p",[a._v("比如遇到上面的问题，可以进行如下配置：")]),a._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("CompileFlags:\n  Add: -ferror-limit"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h3",{attrs:{id:"compile-db的朋友们"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compile-db的朋友们"}},[a._v("#")]),a._v(" compile db的朋友们")]),a._v(" "),s("p",[a._v('clangd依赖的compile_command.json并不一定是存在的，也不一定是可靠的。比\n如，用makefile构建的项目不会生成compile_command.json；而即使用cmake构\n建，由于各种原因，有些头文件也没有包含在compile_command.json中。这会导\n致clangd抛出诸如"cannot find include file"的抱怨，然后停止工作。')]),a._v(" "),s("p",[a._v("compdb和bear是compile db的实用工具。实际实用时，可能更多会用到\ncompdb（不少工作系统可能查不到bear的发行包，而源码编译依赖了太多的\ngithub三方库而困难重重）。")]),a._v(" "),s("h4",{attrs:{id:"compdb的安装及使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compdb的安装及使用"}},[a._v("#")]),a._v(" compdb的安装及使用")]),a._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" pip "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" compdb\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用")]),a._v("\ncompdb "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" ./build list "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" ./compile_commands.json\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);